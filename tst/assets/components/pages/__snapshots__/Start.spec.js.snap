// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Start /> should render Start page static content 1`] = `
Array [
  <article
    className="section has-nav-spacing"
  >
    <div
      className="container content"
    >
      <h1>
        Get Started
      </h1>
      <p>
        This page contains prerequisites, installation instructions, a few examples and links to more examples to get you started with Hive
        <sup>
          io
        </sup>
        . The examples provided cover the basics of RESTful and CQRS/ES architectures. Descriptions are also provided on how to extend the concepts to future iterations to express the evolution of a project.
      </p>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          The Development process for business logic only requires a Text Editor or IDE that supports JavaScript and Node.js/Docker. The rest of the instructions outlined here provide infrastructure details for installation and deployment.
        </span>
      </div>
      <h3>
        Prerequisites
      </h3>
      <p>
        The prerequisites vary depending on the architecture. All implementations require Docker of some form. Whether it is just pure Docker, Docker Swarm, or Kubernetes is up to you. It is also strongly recommended you use a load balancer of some sort since the whole purpose of the framework is horizontal scalability.
      </p>
      <h5>
        Cloud Platforms
      </h5>
      <dl>
        <dt>
          <em>
            <strong>
              Required
            </strong>
          </em>
        </dt>
        <dd>
          <a
            href="https://www.docker.com/"
            target="_blank"
          >
            Docker
          </a>
        </dd>
        <dt>
          <em>
            <strong>
              Recommended
            </strong>
          </em>
        </dt>
        <dd>
          <a
            href="https://docs.docker.com/engine/swarm/"
            target="_blank"
          >
            Swarm
          </a>
          , 
          <a
            href="https://kubernetes.io/"
            target="_blank"
          >
            Kubernetes
          </a>
          , or a 
          <a
            href="https://en.wikipedia.org/wiki/Category:Cloud_computing_providers"
            target="_blank"
          >
            cloud service provider
          </a>
        </dd>
      </dl>
      <h5>
        More
      </h5>
      <p>
        Once you decide on your cloud platform, you're ready to start building and deploying your application services and dependencies. Hive
        <sup>
          io
        </sup>
         will integrate well with many of the 
        <a
          href="https://www.cncf.io/projects/"
          target="_blank"
        >
          cloud-native projects
        </a>
         and 
        <a
          href="https://hub.docker.com/"
          target="_blank"
        >
          other containerized services
        </a>
        .
      </p>
      <h3>
        Installing
      </h3>
      <p>
        Hive
        <sup>
          io
        </sup>
         has minimal requirements for installation, allowing you to choose the solutions that suits your needs regarding storage, security, monitoring, and more. Once you have your cloud platform decided, you can start to code your business logic that will eventually be deployed with one of the container types below.
      </p>
      <dl>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-rest-js/"
            target="_blank"
          >
            <em>
              <strong>
                RESTful
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-rest-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-producer-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Producer
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-producer-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-consumer-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Consumer
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-consumer-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-stream-processor-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Stream Processor
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-stream-processor-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
      </dl>
      <p>
        So far, the list above defines some common types of microservices you may need. Future versions of the framework will add more types to the above and add support for multiple languages.
      </p>
      <h3>
        Examples
      </h3>
      <p>
        A few examples are provided below to help you get started. Additionally, there are links to some sample projects to provide an in-depth look at implementation details.
      </p>
      <h4>
        REST example
      </h4>
      <p>
        Let's start with a REST service. The code below describes a minimal implementation of the business logic and infrastructure as code to implement a REST service.
      </p>
      <h5>
        <a
          href="https://www.npmjs.com/package/hive-io-rest-example"
          target="_blank"
        >
          Business Logic
        </a>
         (
        <a
          href="https://github.com/fnalabs/hive-js-rest-example"
          target="_blank"
        >
          Source Code
        </a>
        )
      </h5>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          You should consider using a private NPM registry or implementing more creative solutions such as extending base Docker images with 
          <code>
            ADD
          </code>
          |
          <code>
            COPY
          </code>
           statements for source code and 
          <code>
            npm link
          </code>
           for your business logic.
        </span>
      </div>
      <h5>
        Infrastructure
      </h5>
      <dl>
        <dt>
          <code>
            Dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-rest-js:latest
            <br />
            RUN npm install hive-io-rest-example
          </pre>
        </dd>
        <dt>
          <code>
            docker-compose.yml
          </code>
        </dt>
        <dd>
          <pre>
            version: '3.5'
            <br />
            services:
            <br />
              hive-rest-js:
            <br />
                build: .
            <br />
                image: hive-rest-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - fluentd
            <br />
                ports:
            <br />
                  - 80:3000
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              fluentd:
            <br />
                image: fluent/fluentd:v1.2.1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              mongo:
            <br />
                image: mongo:3.6.5
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            # networking specifics
            <br />
            networks:
            <br />
              hive-io:
            <br />
                driver: bridge
          </pre>
        </dd>
      </dl>
      <h4>
        CQRS/ES Example
      </h4>
      <p>
        This example evolves the previous REST example into a highly distributed architecture in order to handle different magnitudes of network traffic.
      </p>
      <h5>
        <a
          href="https://www.npmjs.com/package/hive-io-domain-example"
          target="_blank"
        >
          Business Logic
        </a>
         (
        <a
          href="https://github.com/fnalabs/hive-js-domain-example"
          target="_blank"
        >
          Source Code
        </a>
        )
      </h5>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          You should consider using a private NPM registry or implementing more creative solutions such as extending base Docker images with 
          <code>
            ADD
          </code>
          |
          <code>
            COPY
          </code>
           statements for source code and 
          <code>
            npm link
          </code>
           for your business logic.
        </span>
      </div>
      <h5>
        Infrastructure
      </h5>
      <dl>
        <dt>
          <code>
            Producer.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-producer-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Stream-Processor.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-stream-processor-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Consumer.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-consumer-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Rest.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-rest-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            docker-compose.yml
          </code>
        </dt>
        <dd>
          <pre>
            version: '3.5'
            <br />
            services:
            <br />
              # proxy for layer 7 routing
            <br />
              hive-io-proxy:
            <br />
                image: fnalabs/hive-io-proxy:latest
            <br />
                depends_on:
            <br />
                  - hive-producer-js
            <br />
                  - hive-rest-js
            <br />
                  - hive-stream-processor-js
            <br />
                ports:
            <br />
                  - 80:80
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              fluentd:
            <br />
                image: fluent/fluentd:v1.2.1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # producers
            <br />
              hive-producer-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Producer.dockerfile
            <br />
                image: hive-producer-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: 'producer-client'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
            <br />
              # stream processors
            <br />
              hive-stream-processor-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Stream-Processor.dockerfile
            <br />
                image: hive-stream-processor-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  CACHE_URL: 'redis://redis:6379'
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: stream-processor-client
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - redis
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              redis:
            <br />
                image: redis:4.0.9-alpine
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # log stream containers
            <br />
              kafka:
            <br />
                image: confluentinc/cp-kafka:4.1.1-2
            <br />
                depends_on:
            <br />
                  - zookeeper
            <br />
                environment:
            <br />
                  KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            <br />
                  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            <br />
                  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              zookeeper:
            <br />
                image: confluentinc/cp-zookeeper:4.1.1-2
            <br />
                environment:
            <br />
                  ZOOKEEPER_CLIENT_PORT: 2181
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # consumers
            <br />
              hive-consumer-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Consumer.dockerfile
            <br />
                image: hive-consumer-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: consumer-client
            <br />
                  EVENT_STORE_OFFSET: earliest
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              mongo:
            <br />
                image: mongo:3.6.5
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # rest services
            <br />
              hive-rest-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Rest.dockerfile
            <br />
                image: hive-rest-js
            <br />
                environment:
            <br />
                  ACTOR: PostQueryActor
            <br />
                  ACTOR_LIB: hive-io-domain-example
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
            <br />
            # networking specifics
            <br />
            networks:
            <br />
              hive-io:
            <br />
                driver: bridge
          </pre>
        </dd>
      </dl>
    </div>
  </article>,
  <section
    className="hero is-small is-hive"
  >
    <div
      className="hero-body has-text-centered"
    >
      <a
        href="https://fnalabs.github.io/hive-js/"
      >
        <svg
          height="48"
          viewBox="0 0 448 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z"
          />
        </svg>
      </a>
    </div>
  </section>,
]
`;

exports[`<Start /> should render Start page static content and report page view 1`] = `
Array [
  <article
    className="section has-nav-spacing"
  >
    <div
      className="container content"
    >
      <h1>
        Get Started
      </h1>
      <p>
        This page contains prerequisites, installation instructions, a few examples and links to more examples to get you started with Hive
        <sup>
          io
        </sup>
        . The examples provided cover the basics of RESTful and CQRS/ES architectures. Descriptions are also provided on how to extend the concepts to future iterations to express the evolution of a project.
      </p>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          The Development process for business logic only requires a Text Editor or IDE that supports JavaScript and Node.js/Docker. The rest of the instructions outlined here provide infrastructure details for installation and deployment.
        </span>
      </div>
      <h3>
        Prerequisites
      </h3>
      <p>
        The prerequisites vary depending on the architecture. All implementations require Docker of some form. Whether it is just pure Docker, Docker Swarm, or Kubernetes is up to you. It is also strongly recommended you use a load balancer of some sort since the whole purpose of the framework is horizontal scalability.
      </p>
      <h5>
        Cloud Platforms
      </h5>
      <dl>
        <dt>
          <em>
            <strong>
              Required
            </strong>
          </em>
        </dt>
        <dd>
          <a
            href="https://www.docker.com/"
            target="_blank"
          >
            Docker
          </a>
        </dd>
        <dt>
          <em>
            <strong>
              Recommended
            </strong>
          </em>
        </dt>
        <dd>
          <a
            href="https://docs.docker.com/engine/swarm/"
            target="_blank"
          >
            Swarm
          </a>
          , 
          <a
            href="https://kubernetes.io/"
            target="_blank"
          >
            Kubernetes
          </a>
          , or a 
          <a
            href="https://en.wikipedia.org/wiki/Category:Cloud_computing_providers"
            target="_blank"
          >
            cloud service provider
          </a>
        </dd>
      </dl>
      <h5>
        More
      </h5>
      <p>
        Once you decide on your cloud platform, you're ready to start building and deploying your application services and dependencies. Hive
        <sup>
          io
        </sup>
         will integrate well with many of the 
        <a
          href="https://www.cncf.io/projects/"
          target="_blank"
        >
          cloud-native projects
        </a>
         and 
        <a
          href="https://hub.docker.com/"
          target="_blank"
        >
          other containerized services
        </a>
        .
      </p>
      <h3>
        Installing
      </h3>
      <p>
        Hive
        <sup>
          io
        </sup>
         has minimal requirements for installation, allowing you to choose the solutions that suits your needs regarding storage, security, monitoring, and more. Once you have your cloud platform decided, you can start to code your business logic that will eventually be deployed with one of the container types below.
      </p>
      <dl>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-rest-js/"
            target="_blank"
          >
            <em>
              <strong>
                RESTful
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-rest-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-producer-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Producer
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-producer-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-consumer-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Consumer
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-consumer-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
        <dt>
          <a
            href="https://hub.docker.com/r/fnalabs/hive-stream-processor-js/"
            target="_blank"
          >
            <em>
              <strong>
                CQRS/ES Stream Processor
              </strong>
            </em>
          </a>
        </dt>
        <dd>
          <pre>
            $ docker pull fnalabs/hive-stream-processor-js:&lt;[release]|latest&gt;
          </pre>
        </dd>
      </dl>
      <p>
        So far, the list above defines some common types of microservices you may need. Future versions of the framework will add more types to the above and add support for multiple languages.
      </p>
      <h3>
        Examples
      </h3>
      <p>
        A few examples are provided below to help you get started. Additionally, there are links to some sample projects to provide an in-depth look at implementation details.
      </p>
      <h4>
        REST example
      </h4>
      <p>
        Let's start with a REST service. The code below describes a minimal implementation of the business logic and infrastructure as code to implement a REST service.
      </p>
      <h5>
        <a
          href="https://www.npmjs.com/package/hive-io-rest-example"
          target="_blank"
        >
          Business Logic
        </a>
         (
        <a
          href="https://github.com/fnalabs/hive-js-rest-example"
          target="_blank"
        >
          Source Code
        </a>
        )
      </h5>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          You should consider using a private NPM registry or implementing more creative solutions such as extending base Docker images with 
          <code>
            ADD
          </code>
          |
          <code>
            COPY
          </code>
           statements for source code and 
          <code>
            npm link
          </code>
           for your business logic.
        </span>
      </div>
      <h5>
        Infrastructure
      </h5>
      <dl>
        <dt>
          <code>
            Dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-rest-js:latest
            <br />
            RUN npm install hive-io-rest-example
          </pre>
        </dd>
        <dt>
          <code>
            docker-compose.yml
          </code>
        </dt>
        <dd>
          <pre>
            version: '3.5'
            <br />
            services:
            <br />
              hive-rest-js:
            <br />
                build: .
            <br />
                image: hive-rest-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - fluentd
            <br />
                ports:
            <br />
                  - 80:3000
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              fluentd:
            <br />
                image: fluent/fluentd:v1.2.1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              mongo:
            <br />
                image: mongo:3.6.5
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            # networking specifics
            <br />
            networks:
            <br />
              hive-io:
            <br />
                driver: bridge
          </pre>
        </dd>
      </dl>
      <h4>
        CQRS/ES Example
      </h4>
      <p>
        This example evolves the previous REST example into a highly distributed architecture in order to handle different magnitudes of network traffic.
      </p>
      <h5>
        <a
          href="https://www.npmjs.com/package/hive-io-domain-example"
          target="_blank"
        >
          Business Logic
        </a>
         (
        <a
          href="https://github.com/fnalabs/hive-js-domain-example"
          target="_blank"
        >
          Source Code
        </a>
        )
      </h5>
      <div
        className="notification"
      >
        <span
          className="icon"
        >
          <svg
            className="svg-inline"
            viewBox="0 0 512 512"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
              fill="#209cee"
            />
          </svg>
        </span>
        <span>
          You should consider using a private NPM registry or implementing more creative solutions such as extending base Docker images with 
          <code>
            ADD
          </code>
          |
          <code>
            COPY
          </code>
           statements for source code and 
          <code>
            npm link
          </code>
           for your business logic.
        </span>
      </div>
      <h5>
        Infrastructure
      </h5>
      <dl>
        <dt>
          <code>
            Producer.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-producer-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Stream-Processor.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-stream-processor-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Consumer.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-consumer-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            Rest.dockerfile
          </code>
        </dt>
        <dd>
          <pre>
            FROM fnalabs/hive-rest-js:latest
            <br />
            RUN npm install hive-io-domain-example
          </pre>
        </dd>
        <dt>
          <code>
            docker-compose.yml
          </code>
        </dt>
        <dd>
          <pre>
            version: '3.5'
            <br />
            services:
            <br />
              # proxy for layer 7 routing
            <br />
              hive-io-proxy:
            <br />
                image: fnalabs/hive-io-proxy:latest
            <br />
                depends_on:
            <br />
                  - hive-producer-js
            <br />
                  - hive-rest-js
            <br />
                  - hive-stream-processor-js
            <br />
                ports:
            <br />
                  - 80:80
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              fluentd:
            <br />
                image: fluent/fluentd:v1.2.1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # producers
            <br />
              hive-producer-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Producer.dockerfile
            <br />
                image: hive-producer-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: 'producer-client'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
            <br />
              # stream processors
            <br />
              hive-stream-processor-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Stream-Processor.dockerfile
            <br />
                image: hive-stream-processor-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  CACHE_URL: 'redis://redis:6379'
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: stream-processor-client
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - redis
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              redis:
            <br />
                image: redis:4.0.9-alpine
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # log stream containers
            <br />
              kafka:
            <br />
                image: confluentinc/cp-kafka:4.1.1-2
            <br />
                depends_on:
            <br />
                  - zookeeper
            <br />
                environment:
            <br />
                  KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            <br />
                  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            <br />
                  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
              zookeeper:
            <br />
                image: confluentinc/cp-zookeeper:4.1.1-2
            <br />
                environment:
            <br />
                  ZOOKEEPER_CLIENT_PORT: 2181
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # consumers
            <br />
              hive-consumer-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Consumer.dockerfile
            <br />
                image: hive-consumer-js
            <br />
                environment:
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  EVENT_STORE_URL: 'kafka:9092'
            <br />
                  EVENT_STORE_ID: consumer-client
            <br />
                  EVENT_STORE_OFFSET: earliest
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - kafka
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
              mongo:
            <br />
                image: mongo:3.6.5
            <br />
                networks:
            <br />
                  - hive-io
            <br />
                restart: on-failure
            <br />
            <br />
              # rest services
            <br />
              hive-rest-js:
            <br />
                build:
            <br />
                  context: .
            <br />
                  dockerfile: Rest.dockerfile
            <br />
                image: hive-rest-js
            <br />
                environment:
            <br />
                  ACTOR: PostQueryActor
            <br />
                  ACTOR_LIB: hive-io-domain-example
            <br />
                  CLUSTER_SIZE: 1
            <br />
                  MONGO_URL: 'mongodb://mongo:27017/post'
            <br />
                  FLUENTD_HOST: fluentd
            <br />
                  FLUENTD_PORT: 24224
            <br />
                  FLUENTD_TIMEOUT: 3.0
            <br />
                  FLUENTD_RECONNECT: 600000
            <br />
                depends_on:
            <br />
                  - mongo
            <br />
                  - fluentd
            <br />
                networks:
            <br />
                  - hive-io
            <br />
            <br />
            # networking specifics
            <br />
            networks:
            <br />
              hive-io:
            <br />
                driver: bridge
          </pre>
        </dd>
      </dl>
    </div>
  </article>,
  <section
    className="hero is-small is-hive"
  >
    <div
      className="hero-body has-text-centered"
    >
      <a
        href="https://fnalabs.github.io/hive-js/"
      >
        <svg
          height="48"
          viewBox="0 0 448 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z"
          />
        </svg>
      </a>
    </div>
  </section>,
]
`;
